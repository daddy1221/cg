#include<iostream>
#include<graphics.h>
#include<math.h>

using namespace std;

class transform {
public:
    int m, a[20][3], c[20][3];  // Assuming 3 columns for 2D coordinates + homogeneous coordinate
    int i, j, k;

    void object();
    void accept();
    void operator*(float b[3][3]);
};

void transform::object() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    // Draw the original object
    for (i = 0; i < m - 1; i++) {
        line(300 + a[i][0], 300 - a[i][1], 300 + a[i + 1][0], 300 - a[i + 1][1]);
    }
    line(300 + a[0][0], 300 - a[0][1], 300 + a[i][0], 300 - a[i][1]);

    // Draw the transformed object
    for (i = 0; i < m - 1; i++) {
        line(300 + c[i][0], 300 - c[i][1], 300 + c[i + 1][0], 300 - c[i + 1][1]);
    }
    line(300 + c[0][0], 300 - c[0][1], 300 + c[i][0], 300 - c[i][1]);

    int temp;
    cout << "Press 1 to continue: ";
    cin >> temp;
    closegraph();
}

void transform::accept() {
    cout << "\nEnter the number of edges: ";
    cin >> m;
    cout << "\nEnter the coordinates of the object:\n";
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < 2; j++) {  // Input only 2D coordinates
            cin >> a[i][j];
        }
        a[i][2] = 1;  // Set the homogeneous coordinate to 1
    }
}

void transform::operator*(float b[3][3]) {
    for (int i = 0; i < m; i++) {
        c[i][0] = 0;
        c[i][1] = 0;
        c[i][2] = 0;
        for (int j = 0; j < 3; j++) {
            c[i][0] += a[i][j] * b[j][0];  // Apply the transformation matrix
            c[i][1] += a[i][j] * b[j][1];
            c[i][2] += a[i][j] * b[j][2];
        }
    }
}

int main() {
    int ch, tx, ty, sx, sy;
    float deg, theta, b[3][3];
    transform t;
    t.accept();

    cout << "Enter your choice:\n1. Translation\n2. Scaling\n3. Rotation\n";
    cin >> ch;

    switch (ch) {
        case 1:
            cout << "\nTRANSLATION OPERATION\n";
            cout << "Enter value of translation parameters (tx and ty): ";
            cin >> tx >> ty;

            // Translation matrix
            b[0][0] = 1; b[0][1] = 0; b[0][2] = 0;
            b[1][0] = 0; b[1][1] = 1; b[1][2] = 0;
            b[2][0] = tx; b[2][1] = ty; b[2][2] = 1;

            t * b;
            t.object();
            break;

        case 2:
            cout << "\nSCALING OPERATION\n";
            cout << "Enter value of scaling parameters (sx and sy): ";
            cin >> sx >> sy;

            // Scaling matrix
            b[0][0] = sx; b[0][1] = 0; b[0][2] = 0;
            b[1][0] = 0; b[1][1] = sy; b[1][2] = 0;
            b[2][0] = 0; b[2][1] = 0; b[2][2] = 1;

            t * b;
            t.object();
            break;

        case 3:
            cout << "\nROTATION OPERATION\n";
            cout << "Enter rotation angle: ";
            cin >> deg;
            theta = deg * (M_PI / 180);  // Convert degrees to radians

            // Rotation matrix
            b[0][0] = cos(theta); b[0][1] = -sin(theta); b[0][2] = 0;
            b[1][0] = sin(theta); b[1][1] = cos(theta); b[1][2] = 0;
            b[2][0] = 0; b[2][1] = 0; b[2][2] = 1;

            t * b;
            t.object();
            break;

        default:
            cout << "\nInvalid choice\n";
    }

    getch();
    return 0;
}
